{"version":3,"sources":["react.png","Nav.js","Cardd.js","Input.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","Navbar","bg","Brand","href","src","require","width","height","className","alt","Cardd","props","Card","style","margin","overflow","Img","variant","poster_path","Body","Title","title","Text","overview","Button","Input","useState","query","setQuery","baseUrl","setBaseUrl","results","data","setData","isLoading","setIsLoading","useEffect","fetchData","a","axios","result","console","log","Container","fluid","Row","Col","sm","offset","span","InputGroup","marginTop","onChange","event","target","value","FormControl","placeholder","onKeyPress","key","disabled","padding","onClick","fontSize","display","justifyContent","alignItems","Spinner","animation","role","flexWrap","map","item","substring","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.448bf4ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react.2bee11a8.png\";","import React from 'react'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\n\r\nfunction Nav() {\r\n    return <>\r\n        <Navbar bg=\"light\">\r\n            <Navbar.Brand href=\"#home\">\r\n                <img\r\n                    src={require('./react.png')}\r\n                    width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"d-inline-block align-top\"\r\n                    alt=\"React Bootstrap logo\"\r\n                />\r\n                {' '}\r\n                React Project\r\n    </Navbar.Brand>\r\n        </Navbar>\r\n\r\n    </>\r\n}\r\n\r\nexport default Nav ","import React, { useState, useEffect } from 'react'\r\nimport { Card, Button, Image } from 'react-bootstrap'\r\nimport Input from './Input'\r\n\r\nfunction Cardd(props) {\r\n  return <Card style={{ width: '18rem', margin: '3rem', overflow: 'hidden' }}>\r\n    <Card.Img variant=\"top\" src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2${props.poster_path}`} />\r\n    <Card.Body>\r\n      <Card.Title>{props.title}</Card.Title>\r\n      <Card.Text>\r\n        {props.overview}\r\n      </Card.Text>\r\n      <Button\r\n        variant=\"light\">button</Button>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\n\r\nexport default Cardd ","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport Cardd from './Cardd'\r\nimport { Spinner, Button } from 'react-bootstrap'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Container from 'react-bootstrap/Container'\r\n\r\n\r\nfunction Input(props) {\r\n  const [query, setQuery] = useState('')\r\n  const [baseUrl, setBaseUrl] = useState(`https://api.themoviedb.org/3/discover/movie?api_key=872bb5be5fb02a7c99c5227bc9647d70&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1`)\r\n  const [data, setData] = useState({ results: [] })\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [open, setOpen] = useState(false)\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const rand = () => {\r\n      return Math.floor(Math.random() * 20)\r\n    }\r\n    const fetchData = async () => {\r\n      setIsLoading(true)\r\n\r\n      const result = await axios(baseUrl)\r\n      const { results } = result.data\r\n      setData({ results: results })\r\n\r\n\r\n      setIsLoading(false)\r\n    }\r\n    console.log(props)\r\n    fetchData()\r\n  }, [baseUrl])\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      {/* <input type=\"text\" onChange={(event)=>setQuery(event.target.value)}/> */}\r\n      <Container fluid>\r\n        <Row>\r\n          <Col sm={{ offset: 4, span: 4 }}> <InputGroup style={{ marginTop: '2px' }} className=\"sm-3\" onChange={(event) => setQuery(event.target.value)}>\r\n            <FormControl placeholder=\"Type in movie to search for\" value={query} onKeyPress={(event) => {\r\n              {if(query ==='') { return}}\r\n              \r\n              if (event.key === 'Enter') { \r\n              setBaseUrl(`https://api.themoviedb.org/3/search/movie?api_key=872bb5be5fb02a7c99c5227bc9647d70&language=en-US&query=${query}&page=1`) } }} />\r\n            <Button disabled={isLoading || query === ''} style={{ margin: \"2px\", marginTop: '2px', padding: '8px' }} variant=\"info\" onClick={!isLoading ? () => setBaseUrl(`https://api.themoviedb.org/3/search/movie?api_key=872bb5be5fb02a7c99c5227bc9647d70&language=en-US&query=${query}&page=1`) : null}> {isLoading ? 'Loadingâ€¦' : 'Search'}</Button>\r\n          </InputGroup>\r\n            <p style={{ fontSize: '15px' }}>Need a hint? Try to type in<strong> <a onClick={() => setQuery('Avengers')}>Avengers</a></strong> </p>\r\n\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n\r\n\r\n\r\n      {isLoading ? <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}> <Spinner animation=\"border\" role=\"status\">\r\n        <span className=\"sr-only\">Loading...</span>\r\n      </Spinner></div> :\r\n\r\n        <div style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}>\r\n          {data.results.map(item => (\r\n            <Cardd title={item.title} overview={`${item.overview.substring(0, 200)}...`} poster_path={item.poster_path}\r\n            />\r\n\r\n          ))}\r\n        </div>}\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Input\r\n\r\n\r\n\r\n{/* <ul>\r\n                {data.results.map(item => (\r\n                  <li key={item.id}>\r\n                        <h1>{item.title}</h1>\r\n                  </li>\r\n                ))}\r\n              </ul>*/}","import React,{Fragment} from 'react' \r\n\r\nfunction Footer() {\r\n    return <>\r\n    \r\n    \r\n<footer className=\"page-footer font-small cyan darken-3\">\r\n\r\n  \r\n  <div className=\"container\">\r\n\r\n  \r\n    <div className=\"row\">\r\n\r\n  \r\n      <div className=\"col-md-12 py-5\">\r\n        <div className=\"mb-5 flex-center\">\r\n\r\n         \r\n          <a className=\"fb-ic\">\r\n            <i className=\"fab fa-facebook-f fa-lg white-text mr-md-5 mr-3 fa-2x\"> </i>\r\n          </a>\r\n         \r\n          <a className=\"tw-ic\">\r\n            <i className=\"fab fa-twitter fa-lg white-text mr-md-5 mr-3 fa-2x\"> </i>\r\n          </a>\r\n         \r\n          <a className=\"gplus-ic\">\r\n            <i className=\"fab fa-google-plus-g fa-lg white-text mr-md-5 mr-3 fa-2x\"> </i>\r\n          </a>\r\n         \r\n          <a className=\"li-ic\">\r\n            <i className=\"fab fa-linkedin-in fa-lg white-text mr-md-5 mr-3 fa-2x\"> </i>\r\n          </a>\r\n         \r\n          <a className=\"ins-ic\">\r\n            <i className=\"fab fa-instagram fa-lg white-text mr-md-5 mr-3 fa-2x\"> </i>\r\n          </a>\r\n          \r\n          <a className=\"pin-ic\">\r\n            <i className=\"fab fa-pinterest fa-lg white-text fa-2x\"> </i>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      \r\n\r\n    </div>\r\n    \r\n\r\n  </div>\r\n  \r\n\r\n   <div className=\"footer-copyright text-center py-3\">Â© 2020 Copyright:\r\n    <a href=\"https://mdbootstrap.com/\"> MDBootstrap.com</a>\r\n  </div>\r\n  \r\n\r\n</footer>\r\n\r\n        </>\r\n}\r\n\r\nexport default Footer","import React from 'react';\nimport './App.css';\nimport Nav from './Nav'\nimport Input from './Input'\nimport Footer from './Footer'\n\nfunction App() {\n  return (\n   <>\n     <Nav/> \n     <Input/> \n     <Footer/> \n\n\n   </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Input from './Input'\nimport Cardd from './Cardd'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css'; import\n'bootstrap-css-only/css/bootstrap.min.css'; import\n'mdbreact/dist/css/mdb.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}